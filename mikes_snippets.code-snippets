{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:

// LOGGING
	"Print to console": {
		"scope": "javascript,typescript",
		"prefix": "cl",
		"body": [
			"console.log();",
		],
		"description": "Log output to console"
	},

// FUNCTIONS
	"Regular Function": {
		"scope": "javascript,typescript",
		"prefix": "f",
		"body": [
			"function FUNCTION_NAME() {",
			"",
			"}",
		],
		"description": "create function declaration"
	},	

	"Function Expression": {
		"scope": "javascript,typescript",
		"prefix": "fu",
		"body": [
			"const FUNCTION_NAME = function() {",
			"",
			"}",
		],
		"description": "create function expression"
	},

	"Arrow Function": {
		"scope": "javascript,typescript",
		"prefix": "fun",
		"body": [
			"const FUNCTION_NAME = (PARAM1, PARAM2) => {",
			"",
			"}",
		],
		"description": "create arrow function"
	},

// LOOPS
	"For Loop": {
		"scope": "javascript,typescript",
		"prefix": "for",
		"body": [
			"for (let i = 0; i < ARRAY_HERE.length; i++) {",
			"",
			"}",
		],
		"description": "create for loop"
	},

	"For of Loop": {
		"scope": "javascript,typescript",
		"prefix": "foro",
		"body": [
			"for (const [i, ITEM_NAME] of OBJECT.entries()) {",
			"",
			"}",
		],
		"description": "create for of loop"
	},

// EVENT LISTENER, HANDLER, DELEGATE
	"Event Listener": {
		"scope": "javascript,typescript",
		"prefix": "el",
		"body": [
			"document.querySelector(`CSS_SELECTOR`).addEventListener(`EVENT_TYPE`, function () {",
			"",
			"});"
		],
		"description": "create event listener"
	},

	"Event Handler": {
		"scope": "javascript,typescript",
		"prefix": "eh",
		"body": [
			"const VARIALBE_NAME = document.querySelector(`CSS_SELECTOR`);",
			" ",
			"VARIALBE_NAME.EVENT_NAME =  function() {",
			" ",
			"};"
		],
		"description": "create event handler"
	},

	"Delegate an Event": {
		"scope": "javascript,typescript",
		"prefix": "delegate",
		"body": [
			"document.querySelector(`CSS_SELECTOR_FOR_COMMON_PARENT`).addEventListener(`click`, function (e) {",
			"",
			"    if (e.target.classList.contains(`NAME_OF_CLASS_DONT_USE_SELECTOR_PREFIX`)) {",
				"    console.log(e.target);",
			"    }",
			"});"		
		],
		"description": "delegate an event"
	},

// DOM MANIPULATION
	"Query Selector": {
		"scope": "javascript,typescript",
		"prefix": "qs",
		"body": [
			"const VARIALBE_NAME = document.querySelector(`CSS_SELECTOR`);"
		],
		"description": "create query selector"
	},

	"Query Selector All": {
		"scope": "javascript,typescript",
		"prefix": "qsa",
		"body": [
			"const VARIALBE_NAME = document.querySelectorAll(`CSS_SELECTOR`);"
		],
		"description": "create query selector all"
	},
	
	"Get Elements By Tag Name": {
		"scope": "javascript,typescript",
		"prefix": "tn",
		"body": [
			"//HTMLCollection will be updated automatically as page changes",
			"const VARIALBE_NAME = document.getElementsByTagName(`TAG_NAME`);"
		],
		"description": "create get elements by tag name"
	},
	
	"Get Elements By Class Name": {
		"scope": "javascript,typescript",
		"prefix": "cn",
		"body": [
			"//HTMLCollection will be updated automatically as page changes",
			"const VARIALBE_NAME = document.getElementsByClassName(`CLASS_NAME`);"
		],
		"description": "create get elements by class name"
	},
	
	"Insert Adjacent Element": {
		"scope": "javascript,typescript",
		"prefix": "ins",
		"body": [
			"//beforebegin, afterbegin, beforeend, afterend",
			"document.querySelector(`CSS_SELECTOR`).insertAdjacentHTML(`POSITION`, `TEXT`);"
		],
		"description": "insert adjacent element"
	},

	"Delete Element": {
		"scope": "javascript,typescript",
		"prefix": "del",
		"body": [
			"document.querySelector(`THING_TO_CLICK`).",
			"addEventListener(`click`, function () {",
			"    document.querySelector(`THING_TO_DELETE`).remove()",
			"});"			
		],
		"description": "delete an element"
	},

// OBJECT
	"Object": {
		"scope": "javascript,typescript",
		"prefix": "ob",
		"body": [
			"const OBJECT_NAME = {",
			"    PROPERTY_1: PROPERTY_1_VALUE,",
			"    PROPERTY_2: PROPERTY_2_VALUE,",
			"    METHOD_1: function () {",
			"        //FUNCTION BODY",
			"    },",
			"    METHOD_2: function () {",
			"        //FUNCTION BODY",
			"    },",
			"};"
		],
		"description": "create object literal"
	},
	
// ARRAYS	
	"map array": {
		"scope": "javascript,typescript",
		"prefix": "ma",
		"body": [
			"const NEW_ARRAY_NAME = OBJECT.map(function (ITEM_NAME) {",
			"    return // ITEM_YOU_WANT_IN_NEW_ARRAY",
			"});"
		],
		"description": "use map method on an array"
	},

	"filter array": {
		"scope": "javascript,typescript",
		"prefix": "fi",
		"body": [
			"const NEW_ARRAY_NAME = OBJECT.filter(function (ITEM_NAME) {",
			"    return // FILTER CONDITION ON ITEM_NAME",
			"});"
		],
		"description": "use filter method on an array"
	},

	"reduce array": {
		"scope": "javascript,typescript",
		"prefix": "re",
		"body": [
			"const REDUCED_VALUE_NAME = ARRAY_TO_REDUCE.reduce(function (accumulator, currentElement, currentIndex_OPTIONAL, array_OPTIONAL) {",
			"    return accumulator + currentElement",
			"}, INITIAL_VALUE);"
		],
		"description": "use reduce method on an array"
	},
	
// OOP

	"Constructor Function": {
		"prefix": "cons",
		"body": [
		"const NAME_OF_CONSTRUCTOR_FUNCTION = function (PARAMETER_1, PARAMETER_2) {",
		"    this.PARAMETER_1 = PARAMETER_1;",
		"    this.PARAMETER_2 = PARAMETER_2;",
		"};",
		"",
		"NAME_OF_CONSTRUCTOR_FUNCTION.prototype.NAME_OF_METHOD = function () {",
		"",
		"};",
		"",
		"const INSTANCE_NAME = new NAME_OF_CONSTRUCTOR_FUNCTION(`ARGUMENT_1`, `ARGUMENT_2`);"
		],
		"description": "construction function (creates a class) with instance"
	},

	"Create a Class": {
		"prefix": "class",
		"body": [
		"class CLASS_NAME {",
		"    constructor(PARAMETER_1, PARAMETER_2) {",
		"        this.PARAMETER_1 = PARAMETER_1;",
		"        this.PARAMETER_2 = PARAMETER_2;",
		"    }",
		"",
		"    METHOD_NAME_1() {",
		"",
		"    }",
		"",
		"    METHOD_NAME_2() {",
		"",
		"    }",
		"};",
		"",
		"const INSTANCE_NAME = new CLASS_NAME(ARGUMENT_1, ARGUMENT_2);"
		],
		"description": "Create a Class"
	},

// Asynchronous JavaScript
	"Create XMLHttpRequest": {
		"prefix": "XML",
		"body": [
		"const REQUEST_URL_NAME = `API_ENDPOINT`;",
		"const REQUEST_NAME = new XMLHttpRequest();",
		"",
		"REQUEST_NAME.open(`GET_OR_POST`, REQUEST_URL_NAME);",
		"REQUEST_NAME.send();",
		"",
		"REQUEST_NAME.addEventListener(`load`, function () {",
		"    data = JSON.parse(this.responseText);",
		"    console.log(data);",
		"})",
		""
		],
		"description": "Create XMLHttpRequest"
	}
	
}

	