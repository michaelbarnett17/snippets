{
// LOGGING
	"Print to console": {
		"scope": "javascript,typescript",
		"prefix": "cl",
		"body": [
			"console.log();",
		],
		"description": "Log output to console"
	},

// FUNCTIONS
	"Regular Function": {
		"scope": "javascript,typescript",
		"prefix": "f",
		"body": [
			"function FUNCTION_NAME() {",
			"",
			"}",
		],
		"description": "create function declaration"
	},	

	"Function Expression": {
		"scope": "javascript,typescript",
		"prefix": "fu",
		"body": [
			"const FUNCTION_NAME = function () {",
			"",
			"};",
		],
		"description": "create function expression"
	},

	"Arrow Function": {
		"scope": "javascript,typescript",
		"prefix": "fun",
		"body": [
			"const FUNCTION_NAME = (PARAM1, PARAM2) => {",
			"",
			"};",
		],
		"description": "create arrow function"
	},

// LOOPS
	"For Loop - Custom": {
		"scope": "javascript,typescript",
		"prefix": "for",
		"body": [
			"for (let i = 0; i < ARRAY_HERE.length; i++) {",
			"",
			"}",
		],
		"description": "create for loop"
	},

	"For of Loop - Custom": {
		"scope": "javascript,typescript",
		"prefix": "forof",
		"body": [
			"for (const [index, entry] of OBJECT.entries()) {",
			"    console.log(`index \\${index} is \\${entry}`)",
			"}",
		],
		"description": "create for of loop"
	},

// EVENT LISTENER, HANDLER, DELEGATE
	"Event Listener": {
		"scope": "javascript,typescript",
		"prefix": "el",
		"body": [
			"document.querySelector('CSS_SELECTOR').addEventListener('EVENT_TYPE', function () {",
			"",
			"});"
		],
		"description": "create event listener"
	},

	"Event Handler": {
		"scope": "javascript,typescript",
		"prefix": "eh",
		"body": [
			"const VARIALBE_NAME = document.querySelector('CSS_SELECTOR');",
			" ",
			"VARIALBE_NAME.EVENT_NAME = function () {",
			" ",
			"};"
		],
		"description": "create event handler"
	},

	"Delegate an Event": {
		"scope": "javascript,typescript",
		"prefix": "delegate",
		"body": [
			"document.querySelector('CSS_SELECTOR_FOR_COMMON_PARENT').addEventListener('click', function (e) {",
			"",
			"    if (e.target.classList.contains('NAME_OF_CLASS_DONT_USE_SELECTOR_PREFIX')) {",
			"        console.log(e.target);",
			"    }",
			"});"		
		],
		"description": "delegate an event"
	},

// DOM MANIPULATION
	"Query Selector": {
		"scope": "javascript,typescript",
		"prefix": "qs",
		"body": [
			"const VARIALBE_NAME = document.querySelector('CSS_SELECTOR');"
		],
		"description": "create query selector"
	},

	"Query Selector All": {
		"scope": "javascript,typescript",
		"prefix": "qsa",
		"body": [
			"const VARIALBE_NAME = document.querySelectorAll('CSS_SELECTOR');"
		],
		"description": "create query selector all"
	},
	
	"Get Elements By Tag Name": {
		"scope": "javascript,typescript",
		"prefix": "tn",
		"body": [
			"//HTMLCollection will be updated automatically as page changes",
			"const VARIALBE_NAME = document.getElementsByTagName('TAG_NAME');"
		],
		"description": "create get elements by tag name"
	},
	
	"Get Elements By Class Name": {
		"scope": "javascript,typescript",
		"prefix": "cn",
		"body": [
			"//HTMLCollection will be updated automatically as page changes",
			"const VARIALBE_NAME = document.getElementsByClassName('CLASS_NAME');"
		],
		"description": "create get elements by class name"
	},
	
	"Insert Adjacent Element": {
		"scope": "javascript,typescript",
		"prefix": "ins",
		"body": [
			"//beforebegin, afterbegin, beforeend, afterend",
			"document.querySelector('CSS_SELECTOR').insertAdjacentHTML('POSITION', 'TEXT');"
		],
		"description": "insert adjacent element"
	},

	"Delete Element": {
		"scope": "javascript,typescript",
		"prefix": "del",
		"body": [
			"document.querySelector('THING_TO_CLICK')",
			".addEventListener('click', function () {",
			"    document.querySelector('THING_TO_DELETE').remove()",
			"});"			
		],
		"description": "delete an element"
	},

// OBJECT
	"Object Literal": {
		"scope": "javascript,typescript",
		"prefix": "object",
		"body": [
			"const OBJECT_NAME = {",
			"    PROPERTY_1: PROPERTY_1_VALUE,",
			"    PROPERTY_2: PROPERTY_2_VALUE,",
			"    METHOD_1: function () {",
			"        //FUNCTION BODY",
			"    },",
			"    METHOD_2: function () {",
			"        //FUNCTION BODY",
			"    },",
			"};"
		],
		"description": "create object literal"
	},
	
// MAP, FILTER, REDUCE
	"Map array": {
		"scope": "javascript,typescript",
		"prefix": "map",
		"body": [
			"ARRAY_TO_MAP.map((arrayElement) => {",
			"    // what you want done to each element",
			"    return arrayElement",
			"});"
		],
		"description": "use map method on an array"
	},

	"Filter array": {
		"scope": "javascript,typescript",
		"prefix": "filter",
		"body": [
			"ARRAY_TO_FILTER.filter((x) => {",
			"    // true keeps array element x, false filters it out",
			"    return (BOOLEAN_EXPRESSION);",
			"});"
		],
		"description": "use filter method on an array"
	},

	"Reduce array": {
		"scope": "javascript,typescript",
		"prefix": "reduce",
		"body": [
			"ARRAY_TO_REDUCE.reduce((accumulator, currentElement, currentIndex_OPTIONAL, array_OPTIONAL) => {",
			"    return accumulator + currentElement",
			"}, INITIAL_VALUE);"
		],
		"description": "use reduce method on an array"
	},
	
// OOP
	"Constructor Function": {
		"prefix": "constructor",
		"body": [
		"const NAME_OF_CONSTRUCTOR_FUNCTION = function (PARAMETER_1, PARAMETER_2) {",
		"    this.PARAMETER_1 = PARAMETER_1;",
		"    this.PARAMETER_2 = PARAMETER_2;",
		"};",
		"",
		"NAME_OF_CONSTRUCTOR_FUNCTION.prototype.NAME_OF_METHOD = function () {",
		"",
		"};",
		"",
		"const INSTANCE_NAME = new NAME_OF_CONSTRUCTOR_FUNCTION('ARGUMENT_1', 'ARGUMENT_2');"
		],
		"description": "construction function (creates a class) with instance"
	},

	"Create a Class": {
		"prefix": "class",
		"body": [
		"class CLASS_NAME {",
		"    constructor(PARAMETER_1, PARAMETER_2) {",
		"        this.PARAMETER_1 = PARAMETER_1;",
		"        this.PARAMETER_2 = PARAMETER_2;",
		"    }",
		"",
		"    METHOD_NAME_1() {",
		"",
		"    }",
		"",
		"    METHOD_NAME_2() {",
		"",
		"    }",
		"};",
		"",
		"const INSTANCE_NAME = new CLASS_NAME(ARGUMENT_1, ARGUMENT_2);"
		],
		"description": "Create a Class"
	},

// Asynchronous JavaScript
	"Create XMLHttpRequest": {
		"prefix": "xml",
		"body": [
		"const URL_NAME = 'API_ENDPOINT';",
		"const REQUEST_NAME = new XMLHttpRequest();",
		"",
		"REQUEST_NAME.open('GET_OR_POST', URL_NAME);",
		"REQUEST_NAME.send();",
		"",
		"REQUEST_NAME.addEventListener('load', function () {",
		"    const data = JSON.parse(this.responseText);",
		"    console.log(data);",
		"})"
		],
		"description": "Create XMLHttpRequest"
	},

	"Create fetch": {
		"prefix": "fetch",
		"body": [
		"const URL_NAME = 'API_ENDPOINT';",
		"",
		"fetch(URL_NAME)",
		".then(response => response.json())",
		".then(data => {",
		"    // Do something with the data",
		"    console.log(data[0]);",
		"})",
		".catch(error => alert(error))",
		".finally(() => {",
		"    // Finally do something",
		"});"

		],
		"description": "Create fetch"
	},

	"Asynchronous Function": {
		"prefix": "asy",
		"body": [
		  "",
		  "const FUNCTION_NAME = async function (URL_NAME) {",
		  "    try {",
		  "        const RESPONSE_NAME = await fetch(URL_NAME);",
		  "        const DATA_NAME = await RESPONSE_NAME.json();",
		  "",
		  "        // Do something with data",
		  "        console.log(DATA_NAME);",
		  "    } catch (err) {",
		  "        console.error(err);",
		  "    }",
		  "}"
		],
		"description": "Asynchronous Function"
	  },

}

	