{
	// LOGGING
	"JS - Print to console": {
		"scope": "javascript,typescript",
		"prefix": "cl",
		"body": [
			"console.log();",
			"",
		],
		"description": "Log output to console"
	},
	// CONDITIONAL STATEMENTS
	"JS - Switch Statement": {
		"scope": "javascript,typescript",
		"prefix": "switch",
		"body": [
			"switch (${1:INPUT_PARAMATER}) {",
			"    case ${2:VALUE_1}:",
			"        ${4:STATEMENT_1}",
			"        break;",
			"    case ${3:VALUE_2}:",
			"        ${5:STATEMENT_2}",
			"        break;",
			"    default:",
			"        ${6:STATEMENT_3}",
			"    break;",
			"}",
		],
		"description": "Switch Statement"
	},
	"JS - Ternary Operator": {
		"scope": "javascript,typescript",
		"prefix": "ter",
		"body": [
			"${1:CONDITION} ? ${2:RETURN_IF_TRUE} : ${3:RETURN_IF_FALSE}",
		],
		"description": "Ternary Operator"
	},
	// FUNCTIONS
	"JS - Function Declaration": {
		"scope": "javascript,typescript",
		"prefix": "fu",
		"body": [
			"function ${1:FUNCTION_NAME}($2) {",
			"",
			"}",
		],
		"description": "create function declaration"
	},
	"JS - Function Expression": {
		"scope": "javascript,typescript",
		"prefix": "fun",
		"body": [
			"const ${1:FUNCTION_NAME} = function ($2) {",
			"",
			"};",
		],
		"description": "create function expression"
	},
	"JS - Arrow Function Short": {
		"scope": "javascript,typescript",
		"prefix": "ar",
		"body": [
			"const ${1:FUNCTION_NAME} = (${2:PARAM1}) => ${3:WHAT_TO_RETURN};",
		],
		"description": "create arrow function one paramater, one line in body"
	},
	"JS - Arrow Function Long": {
		"scope": "javascript,typescript",
		"prefix": "arr",
		"body": [
			"const ${1:FUNCTION_NAME} = (${2:PARAM1}, ${3:PARAM2}) => {",
			"    return ${4:WHAT_TO_RETURN};",
			"};",
		],
		"description": "create arrow function multiple parmaters and multiple lines in body"
	},
	// LOOPS
	"JS - For Loop": {
		"scope": "javascript,typescript",
		"prefix": "for",
		"body": [
			"for (let ${1:i} = 0; ${1:i} < ${2:ARRAY_HERE}.length; ${1:i}++) {",
			"",
			"}",
		],
		"description": "create for loop"
	},
	"JS - For Map": {
		"scope": "javascript,typescript",
		"prefix": "formap",
		"body": [
			"for (const [${1:index}, ${2:entry}] of ${3:MAP_NAME}.entries()) {",
			"    console.log(`index \\${${1:index}} contains \\${${2:entry}}`)",
			"}",
		],
		"description": "create loop for map"
	},
	// EVENT LISTENER, HANDLER, DELEGATE
	"JS - Event Listener": {
		"scope": "javascript,typescript",
		"prefix": "el",
		"body": [
			"document.querySelector('${1:CSS_SELECTOR}').addEventListener('${2:EVENT_TYPE}', function () {",
			"",
			"});"
		],
		"description": "create event listener"
	},
	"JS - Event Handler": {
		"scope": "javascript,typescript",
		"prefix": "eh",
		"body": [
			"const ${1:VARIALBE_NAME} = document.querySelector('${2:CSS_SELECTOR}');",
			" ",
			"${1:VARIALBE_NAME}.${3:ON_EVENT_NAME} = function () {",
			" ",
			"};"
		],
		"description": "create event handler"
	},
	"JS - Delegate an Event": {
		"scope": "javascript,typescript",
		"prefix": "delegate",
		"body": [
			"document.querySelector('${1:CSS_SELECTOR_FOR_COMMON_PARENT}').addEventListener('click', function (e) {",
			"",
			"    if (e.target.classList.contains('${2:NAME_OF_CLASS_DONT_USE_SELECTOR_PREFIX}')) {",
			"        console.log(e.target);",
			"    }",
			"});"
		],
		"description": "delegate an event"
	},
	// DOM MANIPULATION
	"JS - Query Selector": {
		"scope": "javascript,typescript",
		"prefix": "qs",
		"body": [
			"const ${1:VARIALBE_NAME} = document.querySelector('${2:CSS_SELECTOR}');"
		],
		"description": "create query selector"
	},
	"JS - Query Selector All": {
		"scope": "javascript,typescript",
		"prefix": "qsa",
		"body": [
			"const ${1:VARIALBE_NAME} = document.querySelectorAll('${2:CSS_SELECTOR}');"
		],
		"description": "create query selector all"
	},
	"JS - Get Elements By Tag Name": {
		"scope": "javascript,typescript",
		"prefix": "tn",
		"body": [
			"//HTMLCollection will be updated automatically as page changes",
			"const ${1:VARIALBE_NAME} = document.getElementsByTagName('${2:TAG_NAME}');"
		],
		"description": "create get elements by tag name"
	},
	"JS - Get Elements By Class Name": {
		"scope": "javascript,typescript",
		"prefix": "cn",
		"body": [
			"//HTMLCollection will be updated automatically as page changes",
			"const ${1:VARIALBE_NAME} = document.getElementsByClassName('${2:CLASS_NAME}');"
		],
		"description": "create get elements by class name"
	},
	"JS - Insert Adjacent Element": {
		"scope": "javascript,typescript",
		"prefix": "ins",
		"body": [
			"//beforebegin, afterbegin, beforeend, afterend",
			"document.querySelector('${1:CSS_SELECTOR}').insertAdjacentHTML('${2:POSITION}', '${3:TEXT}');"
		],
		"description": "insert adjacent element"
	},
	"JS - Delete Element": {
		"scope": "javascript,typescript",
		"prefix": "del",
		"body": [
			"document.querySelector('${1:THING_TO_CLICK}')",
			".addEventListener('click', function () {",
			"    document.querySelector('${2:THING_TO_DELETE}').remove()",
			"});"
		],
		"description": "delete an element"
	},
	// OBJECT
	"JS - Object Literal": {
		"scope": "javascript,typescript",
		"prefix": "object",
		"body": [
			"const ${1:OBJECT_NAME} = {",
			"    ${2:PROPERTY_1}: ${6:PROPERTY_1_VALUE},",
			"    ${3:PROPERTY_2}: ${7:PROPERTY_1_VALUE},",
			"    ${4:METHOD_1}: function () {",
			"",
			"    },",
			"    ${5:METHOD_2}: function () {",
			"",
			"    },",
			"};"
		],
		"description": "create object literal"
	},
	// MAP, FILTER, REDUCE
	"JS - Map Array": {
		"scope": "javascript,typescript",
		"prefix": "map",
		"body": [
			"${1:ARRAY_TO_MAP}.map((x) => {",
			"    // what you want done to each element",
			"    return NEW_X",
			"});"
		],
		"description": "use map method on an array"
	},
	"JS - Filter Array": {
		"scope": "javascript,typescript",
		"prefix": "filter",
		"body": [
			"${1:ARRAY_TO_FILTER}.filter((x) => {",
			"    // true keeps array element x, false filters it out",
			"    return (BOOLEAN_EXPRESSION);",
			"});"
		],
		"description": "use filter method on an array"
	},
	"JS - Reduce Array": {
		"scope": "javascript,typescript",
		"prefix": "reduce",
		"body": [
			"${1:ARRAY_TO_REDUCE}.reduce((${2:accumulator}, ${3:x}, ${4:currentIndex_OPTIONAL}, ${5:array_OPTIONAL}) => {",
			"    return ${2:accumulator} + ${3:x}",
			"}, ${6:INITIAL_VALUE});"
		],
		"description": "use reduce method on an array"
	},
	// OOP
	"JS - Constructor Function": {
		"scope": "javascript,typescript",
		"prefix": "constructor",
		"body": [
			"const ${1:NAME_OF_CONSTRUCTOR_FUNCTION} = function (${6:PARAMETER_1}, ${7:PARAMETER_2}) {",
			"    this.${2:VARIABLE_NAME_1} = ${6:PARAMETER_1};",
			"    this.${3:VARIABLE_NAME_2} = ${7:PARAMETER_2};",
			"    this.${4:METHOD_1} = function() {",
			"",
			"    }",
			"};",
			"",
			"${1:NAME_OF_CONSTRUCTOR_FUNCTION}.prototype.${5:PROTOTYPE_METHOD_1} = function() {",
			"",
			" }",
			"",
			"const ${8:INSTANCE_NAME} = new ${1:NAME_OF_CONSTRUCTOR_FUNCTION}(${10:ARGUMENT_1}, ${11:ARGUMENT_2});"
		],
		"description": "construction function (creates a class) with instance"
	},
	"JS - Class": {
		"scope": "javascript,typescript",
		"prefix": "class",
		"body": [
			"class ${1:CLASS_NAME} {",
			"    constructor(${7:PARAMETER_1}, ${8:PARAMETER_2}) {",
			"        this.${3:VARIABLE_NAME_1} = ${7:PARAMETER_1};",
			"        this.${4:VARIABLE_NAME_2} = ${8:PARAMETER_2};",
			"    }",
			"",
			"    ${5:METHOD_NAME_1}() {",
			"",
			"    }",
			"",
			"    ${6:METHOD_NAME_2}() {",
			"",
			"    }",
			"};",
			"",
			"const ${9:INSTANCE_NAME} = new ${1:CLASS_NAME}(${10:ARGUMENT_1}, ${11:ARGUMENT_2});"
		],
		"description": "Create a Class"
	},
	// ASYNCHRONOUS JAVASCRIPT
	"JS - XMLHttpRequest": {
		"scope": "javascript,typescript",
		"prefix": "xml",
		"body": [
			"const ${1:URL_NAME} = '${3:API_ENDPOINT}';",
			"const ${2:REQUEST_NAME} = new XMLHttpRequest();",
			"",
			"${2:REQUEST_NAME}.open('${4:GET_OR_POST}', ${1:URL_NAME});",
			"${2:REQUEST_NAME}.send();",
			"",
			"${2:REQUEST_NAME}.addEventListener('load', function () {",
			"    const data = JSON.parse(this.responseText);",
			"    console.log(data);",
			"})"
		],
		"description": "Create XMLHttpRequest"
	},
	"JS - Fetch": {
		"scope": "javascript,typescript",
		"prefix": "fetch",
		"body": [
			"const ${1:URL_NAME} = '${2:API_ENDPOINT}';",
			"",
			"fetch(${1:URL_NAME})",
			".then(response => response.json())",
			".then(data => {",
			"    // Do something with the data",
			"    console.log(data[0]);",
			"})",
			".catch(error => alert(error))",
			".finally(() => {",
			"    // Finally do something",
			"});"
		],
		"description": "Create fetch"
	},
	"JS - Asynchronous Function": {
		"scope": "javascript,typescript",
		"prefix": "asy",
		"body": [
			"",
			"const ${1:FUNCTION_NAME} = async function (${4:URL_NAME}) {",
			"    try {",
			"        const ${2:RESPONSE_NAME} = await fetch(${4:URL_NAME});",
			"        const ${3:DATA_NAME} = await ${2:RESPONSE_NAME}.json();",
			"",
			"        // Do something with data",
			"        console.log(${3:DATA_NAME});",
			"    } catch (err) {",
			"        console.error(err);",
			"    }",
			"};"
		],
		"description": "Asynchronous Function"
	},
	// RANDOM
	"JS - Random Integer": {
		"scope": "javascript,typescript",
		"prefix": "rand",
		"body": [
			"function randomIntInclusive(min, max) {",
			"    return Math.floor(Math.random() * (max - min + 1) + min)",
			"}",
		],
		"description": "Random Integer"
	},
}